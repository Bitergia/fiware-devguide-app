#!/bin/bash

version="0.1"
appname=$( basename $0 )
compose="$( dirname $0 )/docker-compose.yml"
service=""
remove_containers=0
cygnus_mysql_user='root'
cygnus_mysql_password='mysql'
fiware_service="tourguide"
sensors_command=""
sensors_create_wait=0
sensors_udpate_wait=0

function show_version () {
    cat <<EOF >&2
${appname} version ${version}
EOF
    exit 0
}

function show_help () {
   cat <<EOF >&2
Usage: ${appname} [-h | --help] [-v | --version] [-d | --debug]  <command> [<args>]

Options:

  -h  --help                 Show this help.
  -v  --version              Show program version.
  -d  --debug                Print extra info when running this script.

Available commands:

  start                      Start a service.
  stop                       Stop services.
  configure                  Configure a service.
  load                       Load example data.
  sensors                    Sensors related commands (create, list, simulate data).
  check                      Check for the presence of the required commands.
  help                       Show this help.
  version                    Show program version.

Use '${appname} <command> --help' to get help about a specific <command>.

EOF
   exit 0
}

function not_implemented () {
    echo "Command not implemented yet."
    show_help
}

function cmd_help () {
    show_help
}

function cmd_version () {
    show_version
}

function show_help_start () {
   cat <<EOF >&2
Usage: ${appname} start [-h | --help] <service>

Start one of the following services and its dependencies:

 * orion
 * authzforce
 * keyrock
 * idas
 * cygnus
 * tourguide

Command options:

  -h  --help                 Show this help.

EOF
   exit 0
}

function parse_options_start () {
    if [ $# -lt 1 ]; then
        show_help_start
    else
        case "$1" in
            "-h" | "--help" )
                show_help_start
                ;;
            "orion"|"authzforce"|"keyrock"|"idas"|"cygnus")
                service="$1"
                ;;
            "tourguide")
                # do not modify service, as an empty value will start all containers
                ;;
            "-"*)
                echo "Unknown parameter: $1"
                show_help_start
                ;;
            *)
                echo "Unknown service: $1"
                show_help_start
                ;;
        esac
    fi
}

function cmd_start () {
    parse_options_start "$@"
    docker-compose up -d ${service}
}

function show_help_stop () {
   cat <<EOF >&2
Usage: ${appname} stop [-h | --help] [-r | --remove]

Stops all the services currently running.

Command options:

  -h  --help                 Show this help.
  -r  --remove               Remove docker containers after stopping them.
                             Default is NOT to remove the containers.

EOF
   exit 0
}

function parse_options_stop () {
    if [ $# -gt 0 ]; then
        case "$1" in
            "-h" | "--help" )
                show_help_stop
                ;;
            "-r" | "--remove")
                remove_containers=1
                ;;
            *)
                echo "Unknown parameter: $1"
                show_help_stop
                ;;
        esac
    fi
}

function cmd_stop () {
    parse_options_stop "$@"
    docker-compose stop
    if [ $remove_containers -eq 1 ] ; then
        docker-compose rm -f -v
    fi
}

function show_help_configure () {
   cat <<EOF >&2
Usage: ${appname} configure [-h | --help] <service> <options>

Apply configuration changes for <service>.

Available services:

  * cygnus
  * keyrock

Command options:

  -h  --help                 Show this help.

Use '${appname} configure <service> --help' to get help about
configuration options for a specific <service>.

EOF
   exit 0
}

function parse_options_configure () {
    if [ $# -lt 1 ]; then
        show_help_configure
    else
        case "$1" in
            "-h" | "--help" )
                show_help_configure
                ;;
            "cygnus"|"keyrock")
                service="$1"
                shift
                ;;
            "-"*)
                echo "Unknown parameter: $1"
                show_help_configure
                ;;
            *)
                echo "Unknown service: $1"
                show_help_configure
                ;;
        esac
    fi
}

function cmd_configure () {
    parse_options_configure "$@"
    shift
    cmd_configure_${service} "$@"
}

function show_help_configure_cygnus () {
   cat <<EOF >&2

Usage: ${appname} configure cygnus [-h | --help] [-u <username> | --mysql-user <username>]
                                   [-p <password> | --mysql-password <password>]

Apply configuration changes for cygnus.

Command options:

  -h  --help                         Show this help.
  -u  --mysql-user <username>        Set the MySQL database user to use.
                                     Default value is 'root'.
  -p  --mysql-password <password>    Set the MySQL database password to use.
                                     Default value is 'mysql'.
EOF
   exit 0
}

function parse_options_configure_cygnus () {
    if [ $# -lt 1 ]; then
        show_help_configure_cygnus
    else
        TEMP=`getopt -o hu:p: -l help,mysql-user:,mysql-password: -- "$@"`
        if test "$?" -ne 0 ; then
            show_help_configure_cygnus
        fi
        eval set -- "$TEMP"
        while true ; do
            case "$1" in
                "-h" | "--help" )
                    show_help_configure_cygnus
                    ;;
                "-u" | "--mysql-user" )
                    shift
                    cygnus_mysql_user=$1
                    ;;
                "-p" | "--mysql-password" )
                    shift
                    cygnus_mysql_password=$1
                    ;;
                --|*)
                    break;
                    ;;
            esac
            shift
        done
        shift
        if [ $# -gt 0 ]; then
            echo "Unknown parameters: $@"
            show_help_configure_cygnus
        fi

    fi
}


function cmd_configure_cygnus () {
    parse_options_configure_cygnus "$@"

    local sum=$( md5sum "${compose}" )
    # configure cygnus container
    sed -i "${compose}" \
        -e "/^cygnus:/,/^$/ s/CYGNUS_MYSQL_USER=.*$/CYGNUS_MYSQL_USER=${cygnus_mysql_user}/" \
        -e "/^cygnus:/,/^$/ s/CYGNUS_MYSQL_PASS=.*$/CYGNUS_MYSQL_PASS=${cygnus_mysql_password}/"

    # configure mysql container
    if [ "${cygnus_mysql_user}" = "root" ] ; then
        sed -i "${compose}" \
            -e "/^mysql:/,/^$/ {/environment:/,/^$/ { /- /d}}" \
            -e "/^mysql:/,/^$/ {/environment:/ s/environment:.*$/environment:\n        - MYSQL_ROOT_PASSWORD=${cygnus_mysql_password}/}"
    else
        sed -i "${compose}" \
            -e "/^mysql:/,/^$/ {/environment:/,/^$/ { /- /d}}" \
            -e "/^mysql:/,/^$/ {/environment:/ s/environment:.*$/environment:\n        - MYSQL_USER=${cygnus_mysql_user}\n        - MYSQL_PASSWORD=${cygnus_mysql_password}\n        - MYSQL_DATABASE=${fiware_service}/}"
    fi

    local mod=$( md5sum "${compose}" )
    if [ "${mod}" != "${sum}" ]; then
        echo "Updated ${compose}." >&2
    else
        echo "No modifications applied to ${compose}." >&2
    fi
}

function cmd_configure_keyrock () {
    not_implemented
}

function cmd_load () {
    not_implemented
}

function show_help_sensors () {
   cat <<EOF >&2
Usage: ${appname} sensors [-h | --help] <command> <options>

Run sensors related commands:

  create                     Create sensors for the restaurants available in the application.
  update                     Update all restaurant sensors measurements.
  send-data                  Send a single measurement for a specific sensor.
  simulate-data              Simulate a sensor sending data over a period of time.

Command options:

  -h  --help                 Show this help.

Use '${appname} sensors <command> --help' to get help about a specific <command>.

EOF
   exit 0
}

function parse_options_sensors () {
    if [ $# -lt 1 ]; then
        show_help_sensors
    else
        case "$1" in
            "-h" | "--help" )
                show_help_sensors
                ;;
            "create"|"update"|"send-data"|"simulate-data")
                sensors_command="$1"
                shift
                ;;
            "-"*)
                echo "Unknown parameter: $1"
                show_help_sensors
                ;;
            *)
                echo "Unknown command: $1"
                show_help_sensors
                ;;
        esac
    fi
}

function cmd_sensors () {
    parse_options_sensors "$@"
    shift
    cmd_sensors_${sensors_command} "$@"
}

function show_help_sensors_create () {
   cat <<EOF >&2
Usage: ${appname} sensors create [-h | --help] [-w | --wait]

Create and initialize sensors for all the restaurants available in the application.

Command options:

  -h  --help                 Show this help.
  -w  --wait                 Wait for the tourguide container to be ready.
                             Default is to exit if tourguide container is not ready.

EOF
   exit 0
}

function parse_options_sensors_create () {
    if [ $# -gt 0 ]; then
        case "$1" in
            "-h" | "--help" )
                show_help_sensors_create
                ;;
            "-w"|"--wait")
                shift
                sensors_create_wait=1
                ;;
            *)
                echo "Unknown parameter: $1"
                show_help_sensors_create
                ;;
        esac
    fi
}

function cmd_sensors_create () {
    local _started=0
    local _tries=0
    local _container_name="tourguide"

    parse_options_sensors_create "$@"

    while [ true ]; do
        echo -n "Waiting for tourguide to be ready [$(( ${_tries} + 1 ))]... "
        if ( docker logs ${_container_name} 2>&1 | grep -qE "service apache2 reload" ) ; then
            echo "OK."
            _started=1
        fi

        if [ ${_started} -eq 0 -a ${sensors_create_wait} -eq 1 ]; then
            sleep 1
            _tries=$(( ${_tries} + 1 ))
            echo "Retrying."
        else
            break
        fi
    done

    if [ ${_started} -eq 1 ]; then
        docker exec -i -t ${_container_name} /bin/bash -c 'cd tutorials.TourGuide-App/server/feeders; node sensorsgenerator.js'
    else
        echo "Not ready."
        echo "Stopping."
    fi
}

function show_help_sensors_update () {
   cat <<EOF >&2
Usage: ${appname} sensors update [-h | --help] [-w | --wait]

Update all the restaurant sensors measurements.  This will simulate
all the available sensors sending new measurements.

Command options:

  -h  --help                 Show this help.
  -w  --wait                 Wait for the tourguide container to be ready.
                             Default is to exit if tourguide container is not ready.

EOF
   exit 0
}

function parse_options_sensors_update () {
    if [ $# -gt 0 ]; then
        case "$1" in
            "-h" | "--help" )
                show_help_sensors_update
                ;;
            "-w"|"--wait")
                shift
                sensors_update_wait=1
                ;;
            *)
                echo "Unknown parameter: $1"
                show_help_sensors_update
                ;;
        esac
    fi
}

function cmd_sensors_update () {
    local _started=0
    local _tries=0
    local _container_name="tourguide"

    parse_options_sensors_update "$@"

    while [ true ]; do
        echo -n "Waiting for tourguide to be ready [$(( ${_tries} + 1 ))]... "
        if ( docker logs ${_container_name} 2>&1 | grep -qE "service apache2 reload" ) ; then
            echo "OK."
            _started=1
        fi

        if [ ${_started} -eq 0 -a ${sensors_create_wait} -eq 1 ]; then
            sleep 1
            _tries=$(( ${_tries} + 1 ))
            echo "Retrying."
        else
            break
        fi
    done

    if [ ${_started} -eq 1 ]; then
        docker exec -i -t ${_container_name} /bin/bash -c 'cd tutorials.TourGuide-App/server/feeders; node sensorsupdater.js'
    else
        echo "Not ready."
        echo "Stopping."
    fi
}

function show_help_check () {
   cat <<EOF >&2
Usage: ${appname} check [-h | --help]

Check for the presence of the following commands:

 * docker
 * docker-compose

Command options:

  -h  --help                 Show this help.

EOF
   exit 0
}

function parse_options_check () {
    if [ $# -gt 0 ]; then
        case "$1" in
            "-h" | "--help" )
                show_help_check
                ;;
            *)
                echo "Unknown parameter: $1"
                show_help_check
                ;;
        esac
    fi
}

function cmd_check () {
    local ok=1
    parse_options_check "$@"

    echo "Checking for the required commands:"
    echo ""

    # check for the presence of docker
    echo -ne " * docker: "
    docker --version >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        echo "Found."
    else
        ok=0
        echo "Not found."
    fi

    # check for the presence of docker-compose
    echo -ne " * docker-compose: "
    docker-compose --version >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        echo "Found."
    else
        ok=0
        echo "Not found."
    fi

    echo ""
    if [ ${ok} -eq 0 ]; then
        echo "Some required commands could not be found."
        echo "Please, make sure all the above commands are installed and available."
        exit 1
    else
        echo "All required commands found."
    fi
}

while true ; do
    command="$1"
    case "${command}" in
        "" | "-h" | "--help" )
            show_help
            ;;
        "-v" | "--version")
            show_version
            ;;
        "-d" | "--debug")
            set -x
            ;;
        *)
            shift
            if type cmd_${command} > /dev/null 2>&1 ; then
                cmd_${command} "$@"
            else
                echo "Unknown command: ${command}"
                show_help
            fi
            break
            ;;
    esac
    shift
done
