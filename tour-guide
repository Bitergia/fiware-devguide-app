#!/bin/bash

version="0.1"
appname=$( basename $0 )
service=""
remove_containers=0

function show_version () {
    cat <<EOF >&2
${appname} version ${version}
EOF
    exit 0
}

function show_help () {
   cat <<EOF >&2
Usage: ${appname} [-h | --help] [-v | --version] [-d | --debug]  <command> [<args>]

Options:

  -h  --help                 Show this help.
  -v  --version              Show program version.
  -d  --debug                Print extra info when running this script.

Available commands:

  start                      Start a service.
  stop                       Stop services.
  configure                  Configure a service.
  load                       Load example data.
  post-sensor-data           Post simulated sensor data.
  simulate-sensor-data       Simulate a sensor periodically sending data.
  check                      Check for the presence of the required commands.
  help                       Show this help.
  version                    Show program version.

Use '${appname} <command> --help' to get help about a specific <command>.

EOF
   exit 0
}

function not_implemented () {
    echo "Command not implemented yet."
    show_help
}

function cmd_help () {
    show_help
}

function cmd_version () {
    show_version
}

function show_help_start () {
   cat <<EOF >&2
Usage: ${appname} start [-h | --help] <service>

Start one of the following services and its dependencies:

 * orion
 * authzforce
 * keyrock
 * idas
 * cygnus
 * tourguide

Command options:

  -h  --help                 Show this help.

EOF
   exit 0
}

function parse_options_start () {
    if [ $# -lt 1 ]; then
        show_help_start
    else
        case "$1" in
            "-h" | "--help" )
                show_help_start
                ;;
            "orion"|"authzforce"|"keyrock"|"idas"|"cygnus"|"tourguide")
                service="$1"
                ;;
            "-"*)
                echo "Unknown parameter: $1"
                show_help_start
                ;;
            *)
                echo "Unknown service: $1"
                show_help_start
                ;;
        esac
    fi
}

function cmd_start () {
    parse_options_start "$@"
    docker-compose up -d ${service}
}

function show_help_stop () {
   cat <<EOF >&2
Usage: ${appname} stop [-h | --help] [-r | --remove]

Stops all the services currently running.

Command options:

  -h  --help                 Show this help.
  -r  --remove               Remove docker containers after stopping them.
                             Default is NOT to remove the containers.

EOF
   exit 0
}

function parse_options_stop () {
    if [ $# -gt 0 ]; then
        case "$1" in
            "-h" | "--help" )
                show_help_stop
                ;;
            "-r" | "--remove")
                remove_containers=1
                ;;
            *)
                echo "Unknown parameter: $1"
                show_help_stop
                ;;
        esac
    fi
}

function cmd_stop () {
    parse_options_stop "$@"
    docker-compose stop
    if [ $remove_containers -eq 1 ] ; then
        docker-compose rm -f -v
    fi
}

function cmd_configure () {
    not_implemented
}

function cmd_load () {
    not_implemented
}

function cmd_post-sensor-data () {
    not_implemented
}

function cmd_simulate-sensor-data () {
    not_implemented
}

function show_help_check () {
   cat <<EOF >&2
Usage: ${appname} check [-h | --help]

Check for the presence of the following commands:

 * docker
 * docker-compose

Command options:

  -h  --help                 Show this help.

EOF
   exit 0
}

function parse_options_check () {
    if [ $# -gt 0 ]; then
        case "$1" in
            "-h" | "--help" )
                show_help_check
                ;;
            *)
                echo "Unknown parameter: $1"
                show_help_check
                ;;
        esac
    fi
}

function cmd_check () {
    local ok=1
    parse_options_check "$@"

    echo "Checking for the required commands:"
    echo ""

    # check for the presence of docker
    echo -ne " * docker: "
    docker --version >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        echo "Found."
    else
        ok=0
        echo "Not found."
    fi

    # check for the presence of docker-compose
    echo -ne " * docker-compose: "
    docker-compose --version >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        echo "Found."
    else
        ok=0
        echo "Not found."
    fi

    echo ""
    if [ ${ok} -eq 0 ]; then
        echo "Some required commands could not be found."
        echo "Please, make sure all the above commands are installed and available."
        exit 1
    else
        echo "All required commands found."
    fi
}

while true ; do
    command="$1"
    case "${command}" in
        "" | "-h" | "--help" )
            show_help
            ;;
        "-v" | "--version")
            show_version
            ;;
        "-d" | "--debug")
            set -x
            ;;
        *)
            shift
            if type cmd_${command} > /dev/null 2>&1 ; then
                cmd_${command} "$@"
            else
                echo "Unknown command: ${command}"
                show_help
            fi
            break
            ;;
    esac
    shift
done
